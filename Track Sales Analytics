# In this SQL project, I conducted comprehensive data analysis on a music-related database. 
# Leveraging SQL queries, I explored various aspects of the database, including albums, artists, customers, employees, genres, invoices, tracks, and more. 
# Using a combination of SQL joins, aggregations, and calculations, I gained insights into sales trends, customer behavior, genre popularity, and other key metrics.

# This query retrieves Customers (full names, customer ID, and country) who are not in the US.
SELECT FirstName, LastName, CustomerID, Country 
FROM customers
WHERE Country <> 'USA';

# This query retrieves only the Customers from Brazil.
SELECT *
FROM customers
WHERE Country = 'Brazil';

# This query finds the Invoices of customers from Brazil (Customers full name, invoiceID, Date of the invoice, billing country).
SELECT customers.FirstName, customers.LastName, invoices.InvoiceID, invoices.InvoiceDate, invoices.BillingCountry
FROM invoices
JOIN customers
ON customers.CustomerId = invoices.CustomerId
WHERE invoices.BillingCountry = 'Brazil';

# This query retrieves employees who are Sales Agents.
SELECT *
FROM employees
WHERE Title LIKE '%Sales%Agent%';

# This query shows a unique/distinct list of billing countries from the Invoice Table.
SELECT distinct BillingCountry
FROM invoices;

# This query selects the invoices associated wiht each sales agent.
SELECT employees.FirstName, employees.LastName, invoices.InvoiceId
FROM employees
JOIN customers
ON customers.SupportRepId = employees.EmployeeId
JOIN invoices
ON invoices.CustomerId = customers.customerId;

# This query retrieves the invoice total, Customer Name, Country, and Sales Agent for all invoices and customers.
SELECT invoices.Total, customers.FirstName, customers.LastName, customers.Country, employees.FirstName, employees.LastName
FROM invoices
JOIN customers
ON invoices.CustomerId = customers.CustomerId
JOIN employees
ON customers.SupportRepId = employees.EmployeeId;

# How many invoices where there in 2009?
SELECT COUNT(*)
FROM invoices
WHERE InvoiceDate LIKE '%2009%';

# What are the total sales for 2009?
SELECT SUM(total) 
FROM invoices
WHERE InvoiceDate LIKE '%2009%';

# This query selects the purchased track name and each invoice line ID.
SELECT tracks.Name, invoice_items.InvoiceLineId
FROM tracks
JOIN invoice_items
ON tracks.trackId = invoice_items.TrackId;

# This query retrieves the purchased track name AND artist name with each invoice line ID.
SELECT tracks.Name, artists.Name, invoice_items.InvoiceLineId
FROM tracks
JOIN albums
ON tracks.AlbumId = albums.AlbumId
JOIN artists
ON artists.ArtistId = albums.ArtistId
JOIN invoice_items
ON invoice_items.TrackId = tracks.TrackId;

# This query finds all tracks, album name, media type, and genre.
SELECT tracks.Name, albums.Title, media_types.Name, genres.Name
FROM tracks
JOIN albums
ON tracks.AlbumId = albums.AlbumId
JOIN media_types
ON media_types.MediaTypeId = tracks.MediaTypeId
JOIN genres
ON genres.GenreId = tracks.GenreId;

# This query retrieves the total sales made by each sales agent.
SELECT SUM(invoices.total), employees.FirstName, employees.LastName
FROM invoices
JOIN customers
ON invoices.CustomerId = customers.CustomerId
JOIN employees
ON employees.EmployeeID = customers.SupportRepId
WHERE employees.title = 'Sales Support Agent'
GROUP BY employees.FirstName;

# Which sales agent made the most dollars in sales in 2009?
SELECT SUM(invoices.total), employees.FirstName, employees.LastName
FROM invoices
JOIN customers
ON invoices.CustomerId = customers.CustomerId
JOIN employees
ON employees.EmployeeID = customers.SupportRepId
WHERE employees.title = 'Sales Support Agent'
AND invoices.InvoiceDate Between '2009-01-01' and '2009-12-31'
GROUP BY employees.FirstName
ORDER BY sum(invoices.total) desc
LIMIT 1;

# This query selects the track name for every song on the TV Shows playlist.
SELECT tracks.Name, playlists.name as playlist
FROM playlists
JOIN playlist_track
ON playlist_track.playlistid = playlists.playlistid
JOIN tracks
ON tracks.TrackId = playlist_track.trackid
WHERE playlists.name = 'TV Shows';

# What is the total revenue generated from sales?
SELECT SUM(invoice_items.quantity * invoice_items.unitprice) as revenue
FROM invoice_items
JOIN invoices
ON invoice_items.InvoiceId = invoices.InvoiceId;

# Which album has the highest sales revenue?
SELECT SUM(invoice_items.quantity * invoice_items.unitprice) as revenue, albums.Title
FROM invoice_items
JOIN invoices
ON invoice_items.InvoiceId = invoices.InvoiceId
JOIN albums
ON tracks.albumid = albums.AlbumId
JOIN tracks
ON tracks.trackid = invoice_items.trackid
GROUP BY albums.title
ORDER BY revenue desc
LIMIT 1;

# How many employees report to each manager?
SELECT ReportsTo AS ManagerId, COUNT(*) AS NumberOfEmployees
FROM employees 
GROUP BY ReportsTo;
 
# How many customers are there in each country?
SELECT COUNT(*), country
FROM customers
GROUP BY country;

# Who are the top-spending customers (name, total, top 5)?
SELECT customers.FirstName, customers.LastName, SUM(invoices.total) as total_spent
FROM customers
JOIN invoices
ON invoices.CustomerID = customers.CustomerId
GROUP BY customers.FirstName
ORDER BY total_spent desc
LIMIT 5;

# How many tracks are there in each genre?
SELECT COUNT(*), genres.name
FROM tracks
JOIN genres
ON tracks.GenreId = genres.GenreId
GROUP BY genres.name;

# This query retrieves tracks with no composer.
SELECT * 
FROM tracks
WHERE composer is null;

# How many tracks are there in each playlist?
SELECT COUNT(*) as tracks_quantity, playlists.name
FROM tracks
JOIN playlists
ON playlists.playlistid = playlist_track.PlaylistId
JOIN playlist_track
ON playlist_track.trackid = tracks.trackid
GROUP BY playlists.name;

# What are the different media types available?
SELECT * FROM media_types;

# How many bytes of data are consumed by tracks of each genre?
SELECT SUM(tracks.bytes), genres.name
FROM tracks
JOIN genres
ON genres.genreId = tracks.Genreid
GROUP BY genres.name;
